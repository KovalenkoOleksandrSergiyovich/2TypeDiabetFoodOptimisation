// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WpfApp2TypeDiabet.DBServices;

namespace WpfApp2TypeDiabet.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220611203505_InintialCreation")]
    partial class InintialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodBasket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("UserID");

                    b.ToTable("GoodBasket");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodInBasket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GoodBasketID")
                        .HasColumnType("integer");

                    b.Property<int>("GoodShopStateID")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("GoodBasketID");

                    b.HasIndex("GoodShopStateID");

                    b.ToTable("GoodInBasket");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodInShop", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("GoodAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("GoodId")
                        .HasColumnType("integer");

                    b.Property<double>("GoodPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("GoodUnits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("RestrictionID")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("GoodId");

                    b.HasIndex("RestrictionID");

                    b.ToTable("GoodInShop");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodShopState", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GoodInShopID")
                        .HasColumnType("integer");

                    b.Property<int>("GoodStateID")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("GoodInShopID");

                    b.HasIndex("GoodStateID");

                    b.ToTable("GoodShopState");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodState", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("GoodState");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.Goods", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("GoodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.Restriction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Comparator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("RestrictionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Restriction");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.UserGoodList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GoodID")
                        .HasColumnType("integer");

                    b.Property<int?>("GoodInShopid")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("GoodInShopid");

                    b.HasIndex("UserID");

                    b.ToTable("UserGoodList");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.UserRestrictionList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RestrictionID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("RestrictionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRestrictionList");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodBasket", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.User", "User")
                        .WithMany("GoodBaskets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodInBasket", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.GoodBasket", "GoodBasket")
                        .WithMany("GoodsInBasket")
                        .HasForeignKey("GoodBasketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WpfApp2TypeDiabet.Models.GoodShopState", "GoodShopState")
                        .WithMany()
                        .HasForeignKey("GoodShopStateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodBasket");

                    b.Navigation("GoodShopState");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodInShop", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.Goods", "Good")
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WpfApp2TypeDiabet.Models.Restriction", "Restriction")
                        .WithMany()
                        .HasForeignKey("RestrictionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodShopState", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.GoodInShop", "GoodInShop")
                        .WithMany()
                        .HasForeignKey("GoodInShopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WpfApp2TypeDiabet.Models.GoodState", "GoodState")
                        .WithMany("GoodShopState")
                        .HasForeignKey("GoodStateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodInShop");

                    b.Navigation("GoodState");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.Goods", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.UserGoodList", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.GoodInShop", "GoodInShop")
                        .WithMany()
                        .HasForeignKey("GoodInShopid");

                    b.HasOne("WpfApp2TypeDiabet.Models.User", "User")
                        .WithMany("CustomGoods")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodInShop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.UserRestrictionList", b =>
                {
                    b.HasOne("WpfApp2TypeDiabet.Models.Restriction", "Restriction")
                        .WithMany()
                        .HasForeignKey("RestrictionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WpfApp2TypeDiabet.Models.User", "User")
                        .WithMany("CustomRestrictions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restriction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.Category", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodBasket", b =>
                {
                    b.Navigation("GoodsInBasket");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.GoodState", b =>
                {
                    b.Navigation("GoodShopState");
                });

            modelBuilder.Entity("WpfApp2TypeDiabet.Models.User", b =>
                {
                    b.Navigation("CustomGoods");

                    b.Navigation("CustomRestrictions");

                    b.Navigation("GoodBaskets");
                });
#pragma warning restore 612, 618
        }
    }
}
